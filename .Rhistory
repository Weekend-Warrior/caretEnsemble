library(devtools)
document()
install.packages('testthat')
document()
document(0)
document()
install()
document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?predict
document()
devtools::document()
devtools::install()
library(devtools)
load_all()
library(caret)
?train
madSummary <- function (data,
lev = NULL,
model = NULL) {
out <- mad(data$obs - data$pred,
na.rm = TRUE)
names(out) <- "MAD"
out
}
robustControl <- trainControl(summaryFunction = madSummary)
marsGrid <- expand.grid(degree = 1, nprune = (1:10) * 2)
library(devtools)
library(caret)
library(mlbench)
load_all()
data(BostonHousing)
#######################################
## Example with a custom metric
madSummary <- function (data,
lev = NULL,
model = NULL) {
out <- mad(data$obs - data$pred,
na.rm = TRUE)
names(out) <- "MAD"
out
}
robustControl <- trainControl(summaryFunction = madSummary)
marsGrid <- expand.grid(degree = 1, nprune = (1:10) * 2)
data(BostonHousing)
library(mlbench)
install.packages('mlbench')
data(BostonHousing)
data(BostonHousing)
library(mlbench)
data(BostonHousing)
folds <- createFolds(BostonHousing$medv, returnTrain = T)
oofolds <- folds %>% purrr::map(~ setdiff(1:nrow(BostonHousing), .x))
library(dplyr)
folds <- createFolds(BostonHousing$medv, returnTrain = T)
oofolds <- folds %>% purrr::map(~ setdiff(1:nrow(BostonHousing), .x))
set.seed(100)
folds <- createFolds(BostonHousing$medv, returnTrain = T)
oofolds <- folds %>% purrr::map(~ setdiff(1:nrow(BostonHousing), .x))
head(BostonHousing)
summary(BostonHousing$chas)
summary(BostonHousing$zn)
summary(BostonHousing$tax)
?BostonHousing
data(BostonHousing2)
summary(BostonHousing2$town)
summary(BostonHousing2$tract)
data(BostonHousing2) %>%
select(-lat, -lon, -tract)
data(BostonHousing2) %>%
select(-lat, -lon, -tract)
BostonHousing2 %>%
as.data.frame %>%
select(-lat, -lon, -tract) -> training
BostonHousing2 %>%
as.data.frame %>%
select(-lat, -lon, -tract, -medv) -> training
?trainControl
myControl <- trainControl(index = folds,
indexOut = oofolds,
returnData = F,
savePredictions = T,
summaryFunction = madSummary)
robustControl <- trainControl(summaryFunction = madSummary)
marsGrid <- expand.grid(degree = 1, nprune = (1:10) * 2)
set.seed(100)
folds <- createFolds(training$cmedv, returnTrain = T)
oofolds <- folds %>% purrr::map(~ setdiff(1:nrow(training), .x))
myControl <- trainControl(index = folds,
indexOut = oofolds,
returnData = F,
savePredictions = T,
summaryFunction = madSummary)
robustControl <- trainControl(summaryFunction = madSummary)
marsGrid <- expand.grid(degree = 1, nprune = (1:10) * 2)
set.seed(100)
folds <- createFolds(training$cmedv, returnTrain = T)
oofolds <- folds %>% purrr::map(~ setdiff(1:nrow(training), .x))
myControl <- trainControl(index = folds,
indexOut = oofolds,
returnData = F,
savePredictions = T,
summaryFunction = madSummary)
caretBlend <- caretBlender(x = training %>% select(town),
y = training$cmedv,
trControl = myControl,
metric = 'MAD',
maximize = F)
caretBlend
earthFit <- caretJuice(blender = caretBlend,
data = training %>% select(-cmedv),
method = "earth",
tuneGrid = marsGrid,
metric = "MAD",
maximize = FALSE,
trControl = robustControl)
earthFit$ens_model
marsGrid <- expand.grid(degree = 1:3, nprune = (5:15) * 2)
earthFit <- caretJuice(blender = caretBlend,
data = training %>% select(-cmedv),
method = "earth",
tuneGrid = marsGrid,
metric = "MAD",
maximize = FALSE,
trControl = robustControl)
earthFit$ens_model
earthPred <- predict(earthFit, training)
earthPred
predict.caretJuice()
predict.caretJuice
predict.caretBlender
theDots <- list()
